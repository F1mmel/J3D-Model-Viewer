<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFilesMessage" xml:space="preserve">
    <value>{0} Datei(en) hinzugefügt.</value>
  </data>
  <data name="AddedNewFolderMessage" xml:space="preserve">
    <value>Neuer Ordner hinzugefügt.</value>
  </data>
  <data name="ArchiveLoadedMessage" xml:space="preserve">
    <value>Archiv erfolgreich geladen! ({0} Datei(en) insgesamt)</value>
  </data>
  <data name="DirectoryExists" xml:space="preserve">
    <value>Dieses Verzeichnis existiert bereits.
Sicher, dass du es ersetzen möchtest?</value>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>Doppelter Name</value>
  </data>
  <data name="EncodingMessage" xml:space="preserve">
    <value>({0} encodieren, bitte warten. {1} Verstrichen, {2} Geschätzt)</value>
  </data>
  <data name="EncodingMismatch" xml:space="preserve">
    <value>Unpassende Encodierung</value>
  </data>
  <data name="ExportAllMessage" xml:space="preserve">
    <value>Ganzes Archiv „{0}“ wurde exportiert!</value>
  </data>
  <data name="Fast" xml:space="preserve">
    <value>Schnell</value>
  </data>
  <data name="FileClick" xml:space="preserve">
    <value>Datei „{0}“ ({1} Bytes)</value>
  </data>
  <data name="FolderClick" xml:space="preserve">
    <value>Ordner „{0}“ ({1} Element(e)</value>
  </data>
  <data name="ImportedFolderMessage" xml:space="preserve">
    <value>Ordner „{0}“ importiert.</value>
  </data>
  <data name="ItemAlreadyExists" xml:space="preserve">
    <value>Ein Element mit diesem Namen existiert bereits im Verzeichnis.</value>
  </data>
  <data name="ItemPropertyUpdateMessage" xml:space="preserve">
    <value>Eigenschaften von „{0}“ wurden aktualisiert.</value>
  </data>
  <data name="ItemSavedMessage" xml:space="preserve">
    <value>„{0}“ wurde gespeichert!</value>
  </data>
  <data name="NewArchive" xml:space="preserve">
    <value>Neues Archiv</value>
  </data>
  <data name="NewArchiveFromMessage" xml:space="preserve">
    <value>Neues Archiv aus „{0}“ wurde erstellt.</value>
  </data>
  <data name="NewArchiveMessage" xml:space="preserve">
    <value>Neues Archiv erstellt.</value>
  </data>
  <data name="NewFolder" xml:space="preserve">
    <value>Neuer Ordner</value>
  </data>
  <data name="OpenFileFilter" xml:space="preserve">
    <value>Alle unterstützten Dateien|*.arc;*.szs;*.szp|Revolution Archive|*.arc|YAZ0 identifizierte Revolution Archive|*.szs|YAY0 identifizierte Revolution Archive|*.szp|Alle Dateien|*.*</value>
  </data>
  <data name="RemoveItemMessage" xml:space="preserve">
    <value>„{0}“ wurde entfernt.</value>
  </data>
  <data name="RenameItemMessage" xml:space="preserve">
    <value>„{0}“ wurde nach „{1}“ umbenannt.</value>
  </data>
  <data name="ReplaceItemMessage" xml:space="preserve">
    <value>„{0}" hat „{1}“ ersetzt!</value>
  </data>
  <data name="SaveCompleteMessage" xml:space="preserve">
    <value>Archiv erfolgreich gespeichert!{0}</value>
  </data>
  <data name="SZPMismatch" xml:space="preserve">
    <value>Der ausgewählte Encodierungs-Typ passt nicht zur Datei-Erweiterung.
SZP Dateien sollten mit YAY0 encodiert sein, möchtest du nach YAY0 Stark wechseln?</value>
  </data>
  <data name="SZSMismatch" xml:space="preserve">
    <value>Der ausgewählte Encodierungs-Typ passt nicht zur Datei-Erweiterung.
SZS Dateien sollten mit YAZ0 encodiert sein, möchtest du nach YAZ0 Stark wechseln?</value>
  </data>
  <data name="UnsavedChangesNewFile" xml:space="preserve">
    <value>Du hast ungespeicherte Änderungen.
Sicher, dass du eine neue Datei erstellen möchtest?</value>
  </data>
  <data name="UnsavedChangesOnQuit" xml:space="preserve">
    <value>Du hast ungespeicherte Änderungen.
Sicher, dass du aufhören möchtest?</value>
  </data>
  <data name="UnsavedChangesOpenFile" xml:space="preserve">
    <value>Du hast ungespeicherte Änderungen.
Sicher, dass du eine andere Datei öffnen möchtest?</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warnung</value>
  </data>
  <data name="RenameWindowTitle" xml:space="preserve">
    <value>WiiExplorer - „{0}“ Umbenennen</value>
  </data>
  <data name="ChooseFormatMessage" xml:space="preserve">
    <value>Archivformat wählen</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Frage</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>Die ausgewählte Datei wird nicht unterstützt</value>
  </data>
</root>