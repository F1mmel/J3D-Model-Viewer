<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFilesMessage" xml:space="preserve">
    <value>{0} ファイルが追加されました</value>
  </data>
  <data name="AddedNewFolderMessage" xml:space="preserve">
    <value>新規フォルダーが追加されました</value>
  </data>
  <data name="ArchiveLoadedMessage" xml:space="preserve">
    <value>アーカイブが正常にロードされました！ (合計 {0} ファイル)</value>
  </data>
  <data name="DirectoryExists" xml:space="preserve">
    <value>そのディレクトリには既にファイルが存在しています
置き換えますか？</value>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>名前が重複しています</value>
  </data>
  <data name="EncodingMessage" xml:space="preserve">
    <value>(エンコーディング中少々お待ちください {0} 経過 {1}, 残り {2})</value>
  </data>
  <data name="EncodingMismatch" xml:space="preserve">
    <value>エンコードが合いません</value>
  </data>
  <data name="ExportAllMessage" xml:space="preserve">
    <value>全てのアーカイブ "{0}" が保存されました！</value>
  </data>
  <data name="Fast" xml:space="preserve">
    <value>高速</value>
  </data>
  <data name="FileClick" xml:space="preserve">
    <value>ファイル "{0}" ({1} バイト)</value>
  </data>
  <data name="FolderClick" xml:space="preserve">
    <value>フォルダー "{0}" ({1} 個)</value>
  </data>
  <data name="ImportedFolderMessage" xml:space="preserve">
    <value> "{0}" 個のフォルダーがインポートされました</value>
  </data>
  <data name="ItemAlreadyExists" xml:space="preserve">
    <value>同じ名前のファイルが既にこのディレクトリに存在しています</value>
  </data>
  <data name="ItemPropertyUpdateMessage" xml:space="preserve">
    <value> "{0}" 個のプロパティが更新されました</value>
  </data>
  <data name="ItemSavedMessage" xml:space="preserve">
    <value>"{0}" 個セーブされました！</value>
  </data>
  <data name="NewArchive" xml:space="preserve">
    <value>新規アーカイブ</value>
  </data>
  <data name="NewArchiveFromMessage" xml:space="preserve">
    <value> "{0}"から新規アーカイブを作成しました</value>
  </data>
  <data name="NewArchiveMessage" xml:space="preserve">
    <value>新規アーカイブを作成しました</value>
  </data>
  <data name="NewFolder" xml:space="preserve">
    <value>新規フォルダー</value>
  </data>
  <data name="OpenFileFilter" xml:space="preserve">
    <value>サポートされている全てのファイル|*.arc;*.szs;*.szp|Revolution アーカイブ|*.arc|YAZ0 Identified Revolution アーカイブ|*.szs|YAY0 Identified Revolution アーカイブ|*.szp|All Files|*.*</value>
  </data>
  <data name="RemoveItemMessage" xml:space="preserve">
    <value>"{0}" 個が削除されました</value>
  </data>
  <data name="RenameItemMessage" xml:space="preserve">
    <value>名前が "{0}" から "{1}" に変更されました</value>
  </data>
  <data name="ReplaceItemMessage" xml:space="preserve">
    <value>"{0}" が "{1}" に置き換えられました！</value>
  </data>
  <data name="SaveCompleteMessage" xml:space="preserve">
    <value>アーカイブが正常に保存されました！{0}</value>
  </data>
  <data name="SZPMismatch" xml:space="preserve">
    <value>選択したエンコーディングタイプがファイル拡張子と一致しません
SZPファイルはYaY0エンコードに対応しています,YaY0強力に変更しますか？</value>
  </data>
  <data name="SZSMismatch" xml:space="preserve">
    <value>選択したエンコーディングタイプがファイル拡張子と一致しません
SZSファイルはYaZ0エンコードに対応しています,YaZ0強力に変更しますか？</value>
  </data>
  <data name="UnsavedChangesNewFile" xml:space="preserve">
    <value>保存されていない変更があります
本当に新しいファイルで開始しますか？</value>
  </data>
  <data name="UnsavedChangesOnQuit" xml:space="preserve">
    <value>保存されていない変更があります
本当に終了しますか？</value>
  </data>
  <data name="UnsavedChangesOpenFile" xml:space="preserve">
    <value>保存されていない変更があります
本当に別のファイルを開きますか？</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>警告</value>
  </data>
  <data name="RenameWindowTitle" xml:space="preserve">
    <value>WiiExplorer - 名前変更 "{0}"</value>
  </data>
  <data name="ChooseFormatMessage" xml:space="preserve">
    <value>アーカイブ形式を選択してください</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>質問</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>選択したファイルはサポートされていません</value>
  </data>
</root>