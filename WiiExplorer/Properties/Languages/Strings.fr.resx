<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFilesMessage" xml:space="preserve">
    <value>{0} fichier(s) ajouté(s).</value>
  </data>
  <data name="AddedNewFolderMessage" xml:space="preserve">
    <value>Nouveau dossier ajouté.</value>
  </data>
  <data name="ArchiveLoadedMessage" xml:space="preserve">
    <value>Archive chargée ! ({0} fichier(s) au total)</value>
  </data>
  <data name="DirectoryExists" xml:space="preserve">
    <value>Ce répertoire existe déjà.
Êtes-vous sûr que vous voulez le remplacer ?</value>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>Nom dupliqué</value>
  </data>
  <data name="EncodingMessage" xml:space="preserve">
    <value>(Encodage de « {0} », attendez. Temps écoulé : {1} Elapsed, Temps estimé : {2})</value>
  </data>
  <data name="EncodingMismatch" xml:space="preserve">
    <value>L'encodage ne correspond pas.</value>
  </data>
  <data name="ExportAllMessage" xml:space="preserve">
    <value>L'archive complète « {0} » a été enregistrée !</value>
  </data>
  <data name="Fast" xml:space="preserve">
    <value>Rapide</value>
  </data>
  <data name="FileClick" xml:space="preserve">
    <value>Fichier « {0} » ({1} bytes)</value>
  </data>
  <data name="FolderClick" xml:space="preserve">
    <value>Dossier « {0} » ({1} item(s))</value>
  </data>
  <data name="ImportedFolderMessage" xml:space="preserve">
    <value>Dossier « {0} » importé.</value>
  </data>
  <data name="ItemAlreadyExists" xml:space="preserve">
    <value>Il y a déjà un item avec ce nom dans ce répertoire.</value>
  </data>
  <data name="ItemPropertyUpdateMessage" xml:space="preserve">
    <value>Les propriétés de « {0} » ont été mise à jour.</value>
  </data>
  <data name="ItemSavedMessage" xml:space="preserve">
    <value>« {0} » a été enregistrée !</value>
  </data>
  <data name="NewArchive" xml:space="preserve">
    <value>Nouvelle archive</value>
  </data>
  <data name="NewArchiveFromMessage" xml:space="preserve">
    <value>Une nouvelle archive a été créée à partir de « {0} »</value>
  </data>
  <data name="NewArchiveMessage" xml:space="preserve">
    <value>Une nouvelle archive a été créée.</value>
  </data>
  <data name="NewFolder" xml:space="preserve">
    <value>Nouveau dossier</value>
  </data>
  <data name="OpenFileFilter" xml:space="preserve">
    <value>Tous les fichiers compatibles|*.arc;*.szs;*.szp|Archives Revolution|*.arc|Archives Revolution identifié comme YAZ0|*.szs|Archives Revolution identifié comme YAY0|*.szp|Tous les fichiers|*.*</value>
  </data>
  <data name="RemoveItemMessage" xml:space="preserve">
    <value>« {0} » a été retiré.</value>
  </data>
  <data name="RenameItemMessage" xml:space="preserve">
    <value>« {0} » a été renommé en « {1} ».</value>
  </data>
  <data name="ReplaceItemMessage" xml:space="preserve">
    <value>« {0} » a été remplacé « {1} » !</value>
  </data>
  <data name="SaveCompleteMessage" xml:space="preserve">
    <value>Archive enregistrée !{0}</value>
  </data>
  <data name="SZPMismatch" xml:space="preserve">
    <value>Le type d'encodage sélectionné ne correspond pas à l'extension du fichier.
Les fichiers SZP sont censés être encodés en YAY0. Voulez-vous changer pour « YAY0 fort » ?</value>
  </data>
  <data name="SZSMismatch" xml:space="preserve">
    <value>Le type d'encodage sélectionné ne correspond pas à l'extension du fichier.
Les fichiers SZS sont censés être encodés en YAZ0. Voulez-vous changer pour « YAZ0 fort » ?</value>
  </data>
  <data name="UnsavedChangesNewFile" xml:space="preserve">
    <value>Vous avez des changements non enregistrés.
Êtes-vous sûr que vous voulez commencer un nouveau fichier ?</value>
  </data>
  <data name="UnsavedChangesOnQuit" xml:space="preserve">
    <value>Vous avez des changements non enregistrés.
Êtes-vous sûr que vous voulez quitter ?</value>
  </data>
  <data name="UnsavedChangesOpenFile" xml:space="preserve">
    <value>Vous avez des changements non enregistrés.
Êtes-vous sûr que vous voulez ouvrir un autre fichier ?</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Attention !</value>
  </data>
  <data name="RenameWindowTitle" xml:space="preserve">
    <value>WiiExplorer - Renommer « {0} »</value>
  </data>
  <data name="ChooseFormatMessage" xml:space="preserve">
    <value>Choisissez le format d'archivage</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>Le fichier choisi n'est pas pris en charge</value>
  </data>
</root>